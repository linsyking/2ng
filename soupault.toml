### Configuration file for the soupault website generator ###

## Global settings

[settings]
  # Caching
  caching = true

  # Show build progress
  verbose = false

  # Show detailed debug information
  debug = false

  # Fail on page processing errors
  strict = true

  # Where generated files go
  build_dir = "build/"

  # Where page files are stored
  site_dir = "site/"

  # HTML page skeleton file to insert content into
  default_template_file = "templates/main.html"

  # Insert the content in <main>, after existing children (if any)
  default_content_selector = "main"
  default_content_action = "append_child"

  # Page considered the section index
  index_page = "index"

  page_file_extensions = ["html", "md"]

  doctype = "<!DOCTYPE html>"

  # Automatically load Lua plugins from plugins/
  # E.g. plugins/reading-time.lua is automatically loaded as "reading-time" widget.
  plugin_discovery = true
  plugin_dirs = ["plugins"]

# Options in the [custom_options] table aren't soupault built-ins.
# It's a table for options that can be shared between multiple plugins.
[custom_options]

  # Number of "lastest post" to display on the main page
  blog_summary_max_entries = 10

  ## Atom feed settings
  atom_feeds = true

  # If you want to generate Atom feeds, you will need to adjust the site metadata config below:

  # Required:
  site_url = "https://blog.yydbxx.cn"

  # Optional but strongly recommended:
  site_author = "Linsy"
  site_author_email = "kxiang@umich.edu"
  site_title = "2-ng blog"
  # site_logo = "https://example.com/~jrandomhacker/favicon.png"

  # Completely optional: 
  # site_subtitle = "2-ng"

[asset_processors]
  svg = "convert -background none {{source_file_path}} {{target_dir}}/{{source_file_base_name}}.png"
  ipe = "iperender -png -resolution 200 -transparent {{source_file_path}} {{target_dir}}/{{source_file_base_name}}.png"

[preprocessors]
  # Automatically call pandoc on every *.md page to convert it to HTML
  md = 'bash scripts/md'

## Autogenerated section index settings
[index]
  index = true

  # section = "blog/"

  sort_descending = true

  extract_after_widgets = ['insert-reading-time', 'make-post-header']

  sort_by = "date"

  # A directory with a .leaf file in it is treated as hand-made "clean URL",
  # rather than a section.
  leaf_file = ".leaf"

[index.fields]
  title = { selector = ["#post-title", "h1"] }
  excerpt = { selector = ["#post-excerpt", "p"] }
  date = { selector = ["#post-date", "time"] }
  tags = { selector = ".post-tag", select_all = true }

  reading_time = { selector = "#reading-time" }

[index.views.blog-index]
  # Insert generated index into an element that matches "#blog-index" selector.
  index_selector = "#blog-entries"

  # Only extract metadata from pages in site/blog/*
  section = "blog"
  include_subsections = true

  # Jingoo template for rendering extracted metadata
  index_template = """
    {% for e in entries %}
    <h2><a href="{{e.url}}">{{e.title}}</a></h2>
    <div><strong>Last update:</strong> {{e.date}}</div>
    {% if e.tags %}
    <div class="post-tags">
       <strong>Tags: </strong>
       {%- for t in e.tags -%}
         <a href="/blog/tag/{{t}}"><span class="post-tag">{{t}}</span></a>{% if not loop.last %}, {% endif %}
       {%- endfor -%}
    </div>
    {% endif %}
    <div><strong>Reading time:</strong> {{e.reading_time}}</div>
    <a href="{{e.url}}">Read more</a>
    {% endfor %}
  """

  # Override soupault's built-in index processor with a custom Lua script.
  # That script is written to mimic the built-in indexer behavior,
  # it will take a template from the index_template option.
  file = "helpers/blog-index.lua"

# This view displays the first ten entries on the main page
[index.views.blog-summary]
  index_selector = "#latest-blog-entries"

  section = "blog"
  include_subsections = true

  # In this case index_template is a soupault built-in
  index_template = """
    {% set limit = int(soupault_config.custom_options.blog_summary_max_entries) %}
    <dl>
      {% for e in sublist(0, limit, entries) %}
      <dt>{{e.date}}</dt>
      <dd> <a href="{{e.url}}">{{e.title}}</a> </dd>
      {% endfor %}
      </ul>
    </dl>
  """

## Widgets

# Takes the content of the first #page-title element or <h1> and inserts it into the <title>
# default is used if page has no elements matching those selectors.
[widgets.set-page-title]
  widget = "title"

  # Must run only after the header with an <h1 id="post-title"> element is inserted, which affects the blog section pages
  after = 'make-post-header'

  selector = ["#page-title", "h1"]
  default = "2-ng blog"
  append = " &mdash; 2-ng"

# Inserts the contents of templates/header.html right before the <main> element
# There's a variety of actions, including prepend_child and replace_content
[widgets.insert-header]
  widget = "include"

  selector = "main"
  action = "insert_before"
  file = "templates/header.html"

# This widget comes from plugins/section-link-highlight.lua
# It highlights the "active" link in the navigation menu,
# that is, the link that matches the current page URL
[widgets.highlight-active-link]
  widget = "section-link-highlight"

  # Must run only after the header with a navigation menu is inserted
  after = ["insert-header"]

  selector = "nav"
  active_link_class = "nav-active"

# Inserts the contents of templates/footer.html at the end of the <body>
[widgets.insert-footer]
  widget = "include"
  selector = "body"
  action = "append_child"
  file = "templates/footer.html"

[widgets.make-post-header]
  widget = "post-header"
  section = "blog/"
  include_subsections = true
  exclude_page = "blog/index.md"

  content_container_selector = "main"

  post_header_template = '''
    <div id="post-header">
      <h1 id="post-title">{{title}}</h1>
      <div><strong>Last update:</strong> <time id="post-date" datetime="{{date}}">{{date}}</time></div>
      {% if tags %}
        <div class="post-tags">
         <span><strong>Tags:</strong> </span>
         {%- for t in tags -%}
           <a href="/blog/tag/{{t}}"><span class="post-tag">{{t}}</span></a>{% if not loop.last %}, {% endif %}
         {%- endfor -%}
         </div>
        {% endif %}
    </div>
'''


# Why require adding a target element for the reading-time plugin by hand?
# We'll insert it automatically
[widgets.insert-reading-time-container]
  widget = "insert_html"

  after = "make-post-header"

  # Reading time container should only be in blog/*
  section = "blog/"
  include_subsections = true

  # ...but not in blog/index.html
  exclude_path_regex = "(.*)/index(.*)"

  # Insert the reading time container right after the post title in <h1>
  action = "append_child"
  selector = "#post-header"

  html = '<div><strong>Reading time:</strong> <span id="reading-time"></span></div>'

# This widget comes from plugins/reading-time.lua
# It calculates estimated reading time based on word count
[widgets.insert-reading-time]
  widget = "reading-time"
  reading_speed = 100

  # If this widget runs before "insert-reading-time-container",
  # there will be nowhere to insert the reading time.
  # This is why we explicitly schedule it to run after that widget.
  after = "insert-reading-time-container"

  selector = "#reading-time"

  # The element where it looks for page "content"
  content_selector = "main"

# Inserts a table of contents generated from page headings
[widgets.table-of-contents]
  #exclude_path_regex = '/index(.*)'

  widget = "toc"
  selector = "#generated-toc"

  min_level = 2

  toc_list_class = "toc"
  toc_class_levels = false

  valid_html = true

  numbered_list = true

  heading_links = true
  heading_link_text = "â†’ "
  heading_link_class = "here"

  use_heading_slug = true

[widgets.insert-footnotes-container]
  widget = "insert-if"

  selector = "main"
  check_selector = "fn"
  html = '<div id="footnotes"> </div>'

[widgets.footnotes]
  widget = "footnotes"

  after = "insert-footnotes-container"

  selector = "div#footnotes"
  footnote_selector = ["fn"]
  footnote_link_class = "footnote"
  back_links = true
  link_id_prepend = "footnote-"
  back_link_id_append = "-ref"

[widgets.atom]
  widget = "atom"
  page = "blog/index.md"
  feed_file = "atom.xml"
  use_section = "blog"
  include_subsections = true

[widgets.highlight]
  widget = "preprocess_element"
  selector = '*[class^="language-"]'
  command = 'highlight -O html -f --syntax=$(echo $ATTR_CLASS | sed -e "s/language-//")'
